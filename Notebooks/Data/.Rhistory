install.packages("car")
install.packages("imputeMissings")
install.packages("lsr")
install.packages("CHAID", repos = "http://R-Forge.R-project.org")
install.packages("partykit")
install.packages("CHAID", repos = "http://R-Forge.R-project.org")
install.packages("pROC")
install.packages("precrec")
install.packages("xlsx")
# ?????????????? ?????? ????? ??????????? 100-???????? ?????????
# ?? ????????? ? ??????????? ???????, ??? ???? ????????? ?????????
# ? ??????? ?????? ???????? ?? ?????? ???????? ?????? ?????
data <- read.csv2("C:/Trees/Churn.csv", sep = ";", na.strings = "")
data$churn <- as.factor(data$churn)
data <- unique(data)
data$gender <- as.character(data$gender)
data$gender <- gsub("\\&\\*", "", data$gender)
data$gender <- as.factor(data$gender)
data$marital <- as.character(data$marital)
data$marital <- str_replace_all(data$marital, "[^[:alnum:]]", "")
data$marital <- as.factor(data$marital)
data$pay <- recode(data$pay, "'CD'='CC'")
chaid1.auc <- numeric(100)
chaid2.auc <- numeric(100)
# ????????? 100-??????? ????????? ??
# ????????? ? ??????????? ???????, ??
# ?????? ?? 100 ???????? ?? ?????????
# ??????? ?????? ??????, ?? ???????????
# ????????? ??
set.seed(42)
for (i in 1:100) {
data$random_number <- runif(nrow(data), 0, 1)
development <- data[data$random_number > 0.3, ]
holdout     <- data[data$random_number <= 0.3, ]
data$random_number <- NULL
development$random_number <- NULL
holdout$random_number <- NULL
# ?????????? ???????? ? ?????????? income ? ????????? ? ???????????
# ???????? ???????, ??????????? ?? ????????? ???????
nas <- is.na(development$income)
development$income[nas] <- mean(development$income, na.rm = TRUE)
nas <- is.na(holdout $income)
holdout$income[nas] <- mean(development$income, na.rm = TRUE)
# ?????????? ???????? ? ????????? ?????????? ? ????????? ? ???????????
# ???????? ????????? ? ??????, ???????????? ?? ????????? ???????
values <- compute(development)
development <- impute(development, object = values)
holdout <- impute(holdout, object = values)
development$longdist <- ordered(development$longdist,
levels = c("<2", "2-8", "9-14",
"15-20", "21+"))
development$local <- ordered(development$local,
levels = c("<8", "8-20", "21-35",
"36-55", "56+"))
development$agecat <- ordered(development$agecat,
levels = c("<31", "31-45", "46-58",
"59-70", "71+"))
holdout$longdist <- ordered(holdout$longdist,
levels = c("<2", "2-8", "9-14",
"15-20", "21+"))
holdout$local <- ordered(holdout$local,
levels = c("<8", "8-20", "21-35",
"36-55", "56+"))
holdout$agecat <- ordered(holdout$agecat,
levels = c("<31", "31-45", "46-58",
"59-70", "71+"))
development$income <-cut(x = development$income,
breaks = c(-Inf, 11000, 21000, 31000,
41000, 50000, 59000, 69000,
80000, 90000, +Inf),
include.lowest = TRUE,
ordered_result = TRUE)
holdout$income <-cut(x = holdout$income,
breaks = c(-Inf, 11000, 21000, 31000,
41000, 50000, 59000, 69000,
80000, 90000, +Inf),
include.lowest = TRUE,
ordered_result = TRUE)
chaid1.model  <- chaid(churn ~ . ,
control = chaid_control(minprob = 0.01,
minsplit = 1000,
minbucket = 500),
data = development)
chaid1.score <- predict(chaid1.model, holdout, type = "prob")
chaid1.roc <- roc(holdout$churn, chaid1.score[, 2])
chaid1.auc[i] <- chaid1.roc$auc
chaid2.model  <- chaid(churn ~ . ,
control = chaid_control(minprob = 0.01,
minsplit = 200,
minbucket = 100),
data = development)
chaid2.score <- predict(chaid2.model, holdout, type = "prob")
chaid2.roc <- roc(holdout$churn, chaid2.score[, 2])
chaid2.auc[i] <- chaid2.roc$auc
}
setwd("/Users/artemgruzdev/Learning_Pandas_russian_translation/Notebooks/Data")
# считываем CSV-файл в датафрейм data
data <- read.csv2("Churn_logreg.csv", sep = ";", fileEncoding = "cp1251")
dim(data)
# с помощью функции head() выводим
# первые 5 наблюдений
head(data)
# задаем рабочий каталог
setwd("/Users/artemgruzdev/Learning_Pandas_russian_translation/Notebooks/Data")
# считываем CSV-файл в датафрейм data
data <- read.csv2("Churn_logreg.csv", sep = ";", na.strings = "", fileEncoding = "cp1251")
# выводим информацию о количестве строк (наблюдений)
# и количестве столбцов (переменных)
dim(data)
# с помощью функции head() выводим
# первые 6 наблюдений
head(data)
# с помощью функции tail() выводим
# последние 6 наблюдений
tail(data)
